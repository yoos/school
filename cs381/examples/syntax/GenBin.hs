--
-- Examples illustrating the definition of functions to
-- generate syntax trees
--
module GenBin where


-- The Digit and Bin data types from class
--
data Digit = One | Zero
             deriving Show

data Bin = D Digit
         | B Digit Bin
         deriving Show

-- A pretty printer for binary numbers
--
ppDigit :: Digit -> String
ppDigit Zero = "0"
ppDigit One  = "1"

ppBin :: Bin -> String
ppBin (D d)   = ppDigit d
ppBin (B d b) = ppDigit d++ppBin b

pp :: Bin -> IO ()
pp b = putStr (ppBin b++"\n")

{-

Example:

*GenBin> pp (B One (D Zero))
10

-}


-- We generate binary numbers from natural numbers by using as an 
-- intermediate representation a list of digits.
-- Binary numbers are thus generated by first computing a list
-- of bits representing a natural number and then translating
-- this list into an element of data type Bin.
-- 
type Bits = [Digit]

-- genBits computes the list of binary digits/bits representing a natural
-- number. 
-- For 0 and 1, the result is just a list containing one element,
-- namely Zero or One, repsectively.
-- For larger numbers n, the last bit is obtained by computing the
-- digit for the remainder of n divided by 2, which can be either 1 or 0.
-- The other leading bits are obtained by computing the bit representation
-- for half the value of n (since the other half is already represented
-- by the last bit).
--
genBits :: Int -> Bits
genBits 0 = [Zero]
genBits 1 = [One]
genBits n = genBits (div n 2) ++ genBits (mod n 2)

-- bitsToBin traverses a list of digits and constructs a 
-- binary number. The base case is given by a list of just one digit, which
-- is just converted to a Bin using the D constructor. Otherwise, the B 
-- constructor takes the first digit of the list (d) and the binary number
-- recursively computed for the remaining digits (represented by the rest 
-- list ds) and builds the syntax tree for the whole list of digits.
--
bitsToBin :: Bits -> Bin
bitsToBin [d]    = D d
bitsToBin (d:ds) = B d (bitsToBin ds)

-- genBin simply composes genBits and bitsToBin.
--
genBin :: Int -> Bin
genBin n = bitsToBin (genBits n)

{-

Examples:

*GenBin> genBin 13 
B One (B One (B Zero (D One)))

*GenBin> pp (genBin 13)
1101

-}

