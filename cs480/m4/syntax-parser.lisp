(load "tokens")

(defparameter *oldsym* ())
(defparameter *sym* ())
(defparameter *symbol-table* ())
(defparameter *depth* 0)

(defun init-globals (symbol-table)
  (setf *oldsym* ()
        *sym* ()
        *symbol-table* symbol-table
        *depth* 0
        ))

;;; Convenience function so popping from symbol table fails gracefully.
(defun table-pop (symbol-table)
  (if (> (fill-pointer symbol-table) 0)
    (vector-pop symbol-table)
    (cons 'eof T)))

(defun get-sym ()
  (defparameter *oldsym* *sym*)
  (setf *sym* (table-pop *symbol-table*)))

(defun unget-sym ()
  (vector-push-extend *sym* *symbol-table*)
  (defparameter *sym* *oldsym*)
  *sym*)

(defun parse-reject (str)
  (format *enable-debug* "~,,v,@A" (* *depth* 2) (format NIL "[REJECT ~S] ~@?" *depth* str))
  ;(setf *accept* NIL)
  (unget-sym)
  (format *enable-debug* "~,,v,@A" (* *depth* 2) (format NIL "[REJECT ~S] *sym* reverted to ~S~%" *depth* *sym*))
  NIL)

(defun parse-info (str &optional (enable-indent T))
  (if enable-indent
    (format *enable-debug* "~,,v,@A" (* 2 *depth*) (format NIL "[INFO ~S] ~@?" *depth* str))
    (format *enable-debug* "~@?" str))
  )

(defun accept (token-type)
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Symbol to accept is ~S.. " *sym*))
    (cond ((equal (car *sym*) token-type)
           (parse-info (format NIL "accepting ~S. Next is ~S~%" token-type (get-sym)) NIL)
           T)
          (T
            (parse-info (format NIL "rejecting ~S~%" token-type) NIL)
            NIL)))
  )

(defun expect (token-type)
  (cond ((accept token-type) T)
        (T
          (parse-reject (format NIL "Expected ~S, got ~S instead~%" token-type (car *sym*))) NIL)))

(defun parse (symbol-table)
  (init-globals symbol-table)
  (get-sym)
  (parse-info (format NIL "Parsing on ~S~%" *sym*))
  (parse-S)
  (equal (car *sym*) 'eof))

(defun parse-S ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing S on ~S~%" *sym*))
    (cond ((and (accept 'leftp-dt)
                (parse-S)
                (expect 'rightp-dt)
                (parse-S))
           (parse-info "Parsed: S -> ( S ) S~%") T)
          ((and (parse-expr)
                (parse-S))
           (parse-info "Parsed: S -> expr S~%") T)
          ((accept 'eof)
           (parse-info "Parsed: S -> $~%") T)
          (T
            ;(parse-info "Attempted all derivations, assuming empty string~%")
            (parse-reject "Unable to parse S~%")
            NIL))))

(defun parse-expr ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing expr on ~S~%" *sym*))
    (cond ((parse-oper)
           (parse-info "Parsed: expr -> oper~%") T)
          ((parse-stmt)
           (parse-info "Parsed: expr -> stmt~%") T)
          (T (parse-reject "Unable to parse expr~%") NIL)))
  )

(defun parse-oper ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing oper on ~S~%" *sym*))
    (cond ((and (accept 'leftp-dt)
                (parse-Poper)
                (expect 'rightp-dt))
           (parse-info "Parsed: oper -> ( Poper )~%") T)
          ((parse-const)
           (parse-info "Parsed: oper -> const~%") T)
          ((parse-id)
           (parse-info "Parsed: oper -> id~%") T)
          (T (parse-reject "Unable to parse oper~%") NIL)))
  )

(defun parse-Poper ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing Poper on ~S~%" *sym*))
    (cond ((and (accept 'assign-st)
                (parse-id)
                (parse-oper))
           (parse-info "Parsed: Poper -> := id oper~%"))
          ((and (accept 'binop-ot)
                (parse-oper)
                (parse-oper))
           (parse-info "Parsed: Poper -> binop oper oper~%"))
          ((and (accept 'unop-ot)
                (parse-oper))
           (parse-info "Parsed: Poper -> unop oper~%"))
          (T (parse-reject "Unable to parse Poper~%") NIL)))
  )

(defun parse-stmt ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing stmt on ~S~%" *sym*))
    (cond ((and (accept 'leftp-dt)
                (parse-Pstmt)
                (expect 'rightp-dt))
           (parse-info "Parsed: stmt -> ( Pstmt )~%"))
          (T (parse-reject "Unable to parse stmt~%") NIL)))
  )

(defun parse-Pstmt ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing Pstmt on ~S~%" *sym*))
    (cond ((parse-ifstmt))
          ((parse-elifstmt))
          ;((and (accept 'if-st)
          ;      (parse-expr)
          ;      (parse-expr)
          ;      (or (parse-expr) T)))
          ((and (accept 'while-st)
                (parse-expr)
                (parse-exprs)))
          ((and (accept 'let-st)
                (expect 'leftp-dt)
                (parse-ids)
                (expect 'rightp-dt)))
          ((and (accept 'stdout-st)
                (parse-oper)))
          (T (parse-reject "Unable to parse Pstmt~%") NIL)))
  )

(defun parse-ifstmt ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing ifstmt on ~S~%" *sym*))
    (cond ((and (accept 'if-st)
                (parse-expr)
                (parse-expr)))
          (T (parse-reject "Unable to parse ifstmt~%") NIL)))
  )

(defun parse-elifstmt ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing elifstmt on ~S~%" *sym*))
    (cond ((and (accept 'if-st)
                (parse-expr)
                (parse-expr)
                (parse-expr)))
          (T (parse-reject "Unable to parse elifstmt~%") NIL)))
  )

(defun parse-exprs ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing exprs on ~S~%" *sym*))
    (cond ((parse-+exprs))
          ((parse-expr))
          (T (parse-reject "Unable to parse exprs~%") NIL)))
  )

(defun parse-+exprs ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing +exprs on ~S~%" *sym*))
    (cond ((and (parse-expr)
                (parse-exprs)))
          (T (parse-reject "Unable to parse +exprs~%") NIL)))
  )

(defun parse-ids ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing ids on ~S~%" *sym*))
    (cond ((and (accept 'leftp-dt)
                (parse-id)
                (parse-prim)
                (expect 'rightp-dt)))
          ((parse-+ids))
          (T (parse-reject "Unable to parse ids~%") NIL)))
  )

(defun parse-+ids ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing +ids on ~S~%" *sym*))
    (cond ((and (accept 'leftp-dt)
                (parse-id)
                (parse-prim)
                (expect 'rightp-dt)
                (parse-ids)))
          (T (parse-reject "Unable to parse +ids~%") NIL)))
  )

(defun parse-const ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing const on ~S~%" *sym*))
    (cond ((accept 'boolean-ct))
          ((accept 'integer-ct))
          ((accept 'real-ct))
          ((accept 'string-ct))
          (T (parse-reject "Unable to parse const~%") NIL)))
  )

(defun parse-id ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing id on ~S~%" *sym*))
    (cond ((accept 'function-it))
          ((accept 'variable-it))
          (T (parse-reject "Unable to parse id~%") NIL)))
  )

(defun parse-prim ()
  (let ((*depth* (+ *depth* 1)))
    (parse-info (format NIL "Parsing prim on ~S~%" *sym*))
    (cond ((accept 'boolean-pt))
          ((accept 'integer-pt))
          ((accept 'real-pt))
          ((accept 'string-pt))
          (T (parse-reject "Unable to parse prim~%") NIL)))
  )




(defun syntax-parse (symbol-table grammar depth)
  (let ((parse-tree (list (cons 'leftp-dt "("))))
    (do
      ((sym (table-pop symbol-table)
            (table-pop symbol-table)))
      ((null sym))
      (let ((token-type (car sym))
            (token      (cdr sym)))
        (cond ((equal token-type 'rightp-dt)   ;; Handle closing parenthesis specially
               (format T "~,,v,@A~%" (* 2 (- depth 1)) token)
               (return))
              ((equal token-type 'leftp-dt)   ;; Recurse on opening parenthesis
               (format T "~,,v,@A~%" (* 2 depth) token)
               (let ((subtree (syntax-parse symbol-table grammar (+ 1 depth))))
                 (setf parse-tree
                       (cons subtree parse-tree))))
              (T
                ;; Print to screen at correct indentation
                ;; See http://stackoverflow.com/questions/20072959/lisp-format-a-character-a-number-of-times
                (format T "~,,v,@A~%" (* 2 depth) token)
                (setf parse-tree
                      (cons sym parse-tree))
                ))))
    (setf parse-tree
          (cons (cons 'rightp-dt ")") parse-tree))
    (nreverse parse-tree)))
